import { WHRNG } from "exploits/casino/rng"
import { click, goToCasino, setText } from "exploits/casino/utils"


let annimationTime = 1700

/** @type {NS} */
let _ns

function getInput() {
   let input = eval("document").querySelectorAll("input")
   return input[0]
}

function isRouletteOpen() {
   return !(getButton("Red") == null)
}

async function changeBetValue(v) {

   let inp = getInput()
   //inp.value = 66
   //await inp[Object.keys(inp)[1]].onChange({ isTrusted: true, target: { value: v } });

   getInput().value = v
   await setText(_ns, getInput(), v)
}


function getButton(buttonText) {
   let input = eval("document").querySelectorAll("button")

   for (let i = 0; i < input.length; i++) {
      if (input[i].innerText == buttonText) {
         return input[i]
      }
   }
   return null
}

function getResult() {
   let resultdiv = eval("document").getElementsByClassName("MuiTypography-root MuiTypography-h4 css-6171j5")
   return resultdiv[0].innerHTML
}


let statsSample = 5

async function getStats() {
   let res = []

   for (let i = 0; i < statsSample; i++) {

      if (!isRouletteOpen()) {
         return
      }

      await changeBetValue(0)

      if (isCheater()) {
         return
      }

      await click(_ns, getButton(3))
      await _ns.sleep(annimationTime)
      let poo = getResult()
      res.push(parseInt(poo.substring(0, poo.length - 1)))
   }
   return res
}


/**
 * Description
 * @param {number[]} a1
 * @param {number[]} a2
 * @returns {any}
 */
function arrayDif(a1, a2) {
   let right = 0

   for (let i = 0; i < a1.length; i++) {
      if (a1[i] == a2[i]) {
         right++
      }
   }

   return right


}

function isCheater() {
   let input = eval("document").querySelectorAll("span")

   for (let i = 0; i < input.length; i++) {
      if (input[i].innerText.startsWith("Alright cheater")) {

         input[i].click()
         _ns.write("/data/casino/kickedFromRoulette.txt", "true", "w")
         return true
      }
   }
   return false
}

function guessSeed(t1, t2, stats) {

   let guesses = []

   _ns.print("t2 - t1 ", t2 - t1)

   for (let i = t1; i < t2; i++) {
      let rng = new WHRNG(i)
      let g = []
      for (let j = 0; j < statsSample; j++) {

         g.push(Math.floor(rng.random() * 37))
      }
      guesses.push([g, i, arrayDif(g, stats)])
   }

   guesses = guesses.sort((a, b) => { return b[2] - a[2] })

   return guesses[0]

}

/**
 * Description
 * @param {WHRNG} rng
 * @returns {any}
 */
async function playRoulette(rng) {
   for (let i = 0; i < 20; i++) {



      let bet = Math.min(1e7, Math.floor(_ns.getServerMoneyAvailable("home") * 0.9))
      await changeBetValue(bet.toString())

      let v = Math.floor(rng.random() * 37).toString()

      _ns.print(v)

      if (isCheater()) {
         return
      }

      if (!isRouletteOpen()) {
         return
      }

      await click(_ns, getButton(v))

      await _ns.sleep(annimationTime)

   }

}

/** @param {NS} ns */
export async function main(ns) {
   _ns = ns
   ns.disableLog("sleep")
   ns.tail()

   let { t1, t2, t3 } = await goToCasino(ns, "roulette")
   await ns.sleep(10)
   await changeBetValue(0)

   let stats = await getStats()


   try { //This try is the proof that I suck at this game
      let seed = guessSeed(t1, t3, stats)

      ns.print("Seed = ", seed[1])
      ns.print("Next values : ")

      let rng = new WHRNG(seed[1])


      for (let i = 0; i < statsSample; i++) {
         rng.random()
      }

      await playRoulette(rng)


   } catch { }

}